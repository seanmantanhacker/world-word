<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">


    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
    <title>Game Lobby</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <link rel="stylesheet" href="/css/home.css" />
    <audio id="music1" loop >
        <source src="/music/warrior_30sec-intro-192837.mp3">
        Your browser does not support the audio element.
    </audio>
    
    </head>
    <body class="bg2">
        <div class="container">
            <div class="panel panel-default center">
              <div class="panel-heading ">
                <h3 class="panel-title">Game Lobby</h3> 
                <h2 id="timer" class="hidden"></h2>
              </div>
              <div id="list-group" class="center">
                
                    <% for (i =0 ; i < Object.keys(peserta).length; i++) { %>
                        <button class="center-button"><%=peserta[Object.keys(peserta)[i]].name;%></button>
                
                    <% }%>
                    
                
              </div>
            </div>
            <div class="username center">
                <label for="uname">Username</label>
                <input class="form-control" type="text" placeholder="Enter Username" name="uname" required>
             </div>
             <div class="center">
                <button id="join-button" class="center-button2" type="button">Join Lobby !</button>
                <button id="start-button" class="remove center-button2" type="button">START !</button>
             </div>
            
        </div>
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    
      
  </body>
</html>
<script>
    function generateUUID() { // Public Domain/MIT
    var d = new Date().getTime();//Timestamp
    var d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16;//random number between 0 and 16
        if(d > 0){//Use timestamp until depleted
            r = (d + r)%16 | 0;
            d = Math.floor(d/16);
        } else {//Use microseconds since page-load if supported
            r = (d2 + r)%16 | 0;
            d2 = Math.floor(d2/16);
        }
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
}
</script>
<script>
    var myId = ""
    var start_able = true
    var audio1 = document.getElementById("music1");
    var app = {
        socket: null,
        connect: function() {
            var self = this;
            if( self.socket ) {
                self.socket.destroy();
                delete self.socket;
                self.socket = null;
            }
            this.socket = io.connect({
                reconnection: true,
                reconnectionDelay: 1000,
                reconnectionDelayMax : 5000,
                reconnectionAttempts: Infinity
            } );
            this.socket.on( 'connect', function () {
                             
                console.log( 'connected to server' );
            } );
            this.socket.on( 'disconnect', function () {
                console.log( 'disconnected from server' );
                window.setTimeout( 'app.connect()', 5000 );
            } );
            this.socket.on( 'join lobby', function (msg) {
                
                if (msg.assignUser == myId){
                    $( "#join-button" ).off();
                    $("#join-button").addClass("remove");
                }
                $( "#list-group" ).empty()
                pesertaa = msg.peserta
                for (i =0 ; i < Object.keys(pesertaa).length; i++){
                    
                    $( "#list-group" ).append(`<button class="center-button">${pesertaa[Object.keys(pesertaa)[i]].name}</button>`);
                }
            
                if (pesertaa[myId].host){
                    $( "#start-button" ).removeClass( "remove" )
                }
            } );

            this.socket.on('set-session-acknowledgement', function(data){
                sessionStorage.setItem('sessionId', data.sessionId);
            })

            this.socket.on( 'timer game start', function (msg) {
                console.log(msg)
                
                $( "#timer" ).removeClass( "hidden" )
                $( "#timer" ).text(msg)
                
                if (msg <= 0){
                    window.location.href = "/loading"
                }

                
            } );
        }
} // app
    
    // A $( document ).ready() block.
    $( document ).ready(function() {
             
        const my_uuid = localStorage.getItem("uuid");
        
        if (my_uuid == null){
            let myuuid = generateUUID();
            
            localStorage.setItem("uuid", myuuid);
            myId = myuuid
        } else {
            myId = my_uuid
        }      

        $( "#join-button" ).on( "click", function() {            
            app.connect();           
            uname=  $(".username").find('input[name="uname"]').val()
            data ={
                from : myId,
                uname : uname
            }     
            audio1.play();
            app.socket.emit('join lobby', data);
        });

        $( "#start-button" ).on( "click", function() {       
            if (start_able){
                audio1.pause()
                start_able = false
                app.socket.emit('game start', "null");
            }    
            
            
        });
    });


    // socket.on("connect", () => {
    //     myId = socket.id
    //     console.log(myId)
    // });

    // socket.on('join lobby', function(msg) {
    //     console.log(msg)
    //     console.log(msg.from)
    //     console.log(socket.id)
    //     if (msg.from == socket.id){
    //         $( "#join-button" ).off();
    //         $("#join-button").addClass("hidden");
    //     }
    //     $( ".list-group" ).empty()
    //     for (i =0 ; i < Object.keys(msg).length; i++){

    //         $( ".list-group" ).append(`<li class="list-group-item">${msg[Object.keys(msg)[i]].name}</li>`);
    //     }
        

    // });
</script>